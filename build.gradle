import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'maven-publish'
    id 'io.papermc.paperweight.userdev' version '1.3.3'
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

group = 'net.skeagle'
version = '5.0.0-pre18'
String mc = '1.18'

repositories {
    mavenCentral()
    maven { url = uri('https://oss.sonatype.org/content/repositories/snapshots') }
    maven { url = uri('https://jitpack.io') }
    gradlePluginPortal()
    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
}

tasks {
    build {
        dependsOn(reobfJar)
    }
}

dependencies {
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:${mc}-R0.1-SNAPSHOT")
    implementation 'org.xerial:sqlite-jdbc:3.36.0.2'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    compileOnly 'net.skeagle:VRNLib:2.0b'
    compileOnly "org.spigotmc:spigot-api:${mc}-R0.1-SNAPSHOT"
    compileOnly 'net.luckperms:api:5.3'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
}

task updatePlugins {
    doLast {
        copy {
            from 'build/libs/'
            exclude '*obf.jar'
            exclude '*dev.jar'
            into "C:/Users/Skeagle/Documents/VRN Stuff/Dev ${mc}/plugins"
            rename { "${rootProject.name} ${version}.jar" }
        }
    }
}

task deploy(dependsOn: ["jar", "updatePlugins"]) {
    updatePlugins.mustRunAfter jar
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
        maven {
            url "https://repo.skeagle.net/snapshots"
            credentials {
                username = alias
                password = token
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
