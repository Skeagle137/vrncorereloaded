plugins {
    id 'java'
    id 'maven-publish'
    id 'io.papermc.paperweight.userdev' version '1.5.1'
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

group = 'net.skeagle'
version = '5.2.0'
Version mc = new Version("19", "4")
String vrnlib = '2.1.3'

repositories {
    mavenCentral()
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.skeagle.net/snapshots' }
    gradlePluginPortal()
    mavenLocal()
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources'
        }
    }
}

tasks {
    build {
        dependsOn(reobfJar)
    }
}

dependencies {
    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:${mc.getVersion()}-R0.1-SNAPSHOT")
    implementation 'org.xerial:sqlite-jdbc:3.41.0.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    compileOnly "net.skeagle:VRNLib:${vrnlib}"
    compileOnly "org.spigotmc:spigot-api:${mc.getVersion()}-R0.1-SNAPSHOT"
    compileOnly 'net.luckperms:api:5.4'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
    implementation 'com.github.LeonMangler:SuperVanish:6.2.12'
}

task updatePlugins {
    doLast {
        copy {
            from 'build/libs/'
            exclude '*dev.jar'
            into "C:/Users/Skeagle/Documents/VRN Stuff/Dev ${mc.getMain()}/plugins"
            rename { "${rootProject.name} ${version}.jar" }
        }
    }
}

task deploy(dependsOn: ["jar", "updatePlugins"]) {
    updatePlugins.mustRunAfter jar
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
    options.encoding = 'UTF-8'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

class Version {

    private String main
    private String sub

    Version(String main) {
        this(main, null)
    }

    Version(String main, String sub) {
        this.main = "1." + main
        this.sub = sub
    }

    String getVersion() {
        return main + (sub != null ? ".$sub" : "")
    }

    String getMain() {
        return main
    }
}
